<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jh.blog.dao.BlogDao">

    <!--    多表查询-->
    <resultMap id="blog" type="Blog">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="flag" column="flag"/>
        <result property="views" column="views"/>
        <result property="updateTime" column="update_time"/>
        <result property="typeId" column="type_id"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="shareStatement" column="share_statement"/>
        <result property="published" column="published"/>
        <result property="appreciation" column="appreciation"/>
        <result property="commentabled" column="commentabled"/>
        <result property="description" column="description"/>
        <result property="recommend" column="recommend"/>
        <result property="createTime" column="create_time"/>
        <result property="typeId" column="type_id"/>
        <result property="userId" column="user_id"/>
        <result property="tagIds" column="tag_ids"/>
        <association property="type" javaType="Type">
            <id property="id" column="typeid"/>
            <result property="name" column="typename"/>
        </association>
        <association property="user" javaType="User">
            <id property="id" column="uid"/>
            <result property="nickname" column="nickname"/>
            <result property="username" column="username"/>
            <result property="email" column="email"/>
            <result property="avatar" column="avatar"/>
        </association>
        <collection property="tags" ofType="Tag">
            <id property="id" column="tagid"/>
            <result property="name" column="tagname"/>
        </collection>
    </resultMap>

    <delete id="deleteBlog">
        delete
        from t_blog
        where id = #{id}
    </delete>

    <select id="getIndexBlog" resultMap="blog">  /*主页博客展示*/
    select b.id,
           b.title,
           b.first_picture,
           b.views,
           b.update_time,
           b.description,
           t.name typename,
           t.id   typeid,
           u.nickname,
           u.avatar
    from t_blog b
             left join t_type t
                       on b.type_id = t.id
             left join t_user u
                       on u.id = b.user_id
    where b.published = 1
    order by b.update_time desc
    </select>

    <select id="getAllHotBlog" resultMap="blog">/*查询热榜博客*/
        select b.id,
               b.title,
               b.first_picture,
               b.views,
               b.update_time,
               b.description,
               t.name typename,
               u.nickname,
               u.avatar
        from t_blog b

                left join t_type t
                    on b.type_id = t.id
                left join t_user u
                    on u.id = b.user_id
        WHERE
              b.id IN
        <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>


    <select id="getAllBlog" resultMap="blog">  /*后台博客展示*/
    select b.id,
           b.title,
           b.update_time,
           b.recommend,
           b.type_id,
           b.published,
           t.id   typeid,
           t.name typename
    from t_blog b
             left join t_type t
                       on b.type_id = t.id /*博客类型id=类型id*/
    </select>

    <select id="getByTypeId" resultMap="blog">
        select b.id,
               b.title,
               b.first_picture,
               b.views,
               b.update_time,
               b.description,
               t.name typename,
               t.id   typeid,
               u.nickname,
               u.avatar
        from t_blog b

                 left join t_type t
                           on b.type_id = t.id
                 left join t_user u
                           on u.id = b.user_id
        where b.type_id = #{typeId}
          and b.published = 1
        order by b.update_time desc


    </select>

    <select id="getByTagId" resultMap="blog">
        select b.id,
               b.title,
               b.first_picture,
               b.views,
               b.update_time,
               b.description,
               t.name  typename,
               t.id    typeid,
               t1.name tagname,
               t1.id   tagid,
               u.nickname,
               u.avatar
        from t_blog b

                 left join t_type t
                           on b.type_id = t.id
                 left join t_user u
                           on u.id = b.user_id
                 left join t_blog_tags tb
                           on tb.blog_id = b.id
                 left join t_tag t1
                           on tb.tag_id = t1.id

        where t1.id = #{tagId}
          and b.published = 1
        order by b.update_time desc
    </select>

    <!--    推荐博客-->
    <select id="getAllRecommendBlog" resultMap="blog">
        select id, title, recommend
        from t_blog
        where published = 1
        order by update_time desc;
    </select>

    <select id="getBlog" resultMap="blog"> /*后台展示博客*/
    select b.id,
           b.published,
           b.flag,
           b.title,
           b.content,
           b.type_id,
           b.tag_ids,
           b.first_picture,
           b.description,
           b.recommend,
           b.share_statement,
           b.appreciation,
           b.commentabled
    from t_blog b
    where b.id = #{id};
    </select>

    <!--    博客详情-->
    <select id="getDetailedBlog" resultMap="blog">  /*博客详情*/
    select b.id,
           b.first_picture,
           b.flag,
           b.title,
           b.content,
           b.views,
           b.update_time,
           b.commentabled,
           b.share_statement,
           b.appreciation,
           u.nickname,
           u.avatar,
           t.id   tagid,
           t.name tagname
    from t_blog b
             LEFT JOIN t_blog_tags bt on bt.blog_id = b.id
             LEFT JOIN t_tag t on t.id = bt.tag_id
             LEFT JOIN t_user u on u.id = b.user_id
    WHERE b.id = #{id}
    </select>
    <!--    后台搜索-->
    <select id="getSearchBlog" resultMap="blog">
        <bind name="pattern" value="'%' + query + '%'"/>
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name typename,
        u.nickname, u.avatar

        from t_blog b

        left join t_type t
        on b.type_id = t.id
        left join t_user u
        on u.id = b.user_id
        where b.title like #{pattern} or b.content like #{pattern}
        order by b.update_time desc
    </select>

    <!--    后台搜索分页-->
    <select id="searchAllBlog" parameterType="Blog" resultMap="blog">
        <bind name="pattern" value="'%' + title + '%'"/>
        /*模糊查询*/
        select b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id typeid, t.name typename
        from t_blog b

        left join t_type t
        on b.type_id = t.id
        <where>
            <if test="1 == 1">
                b.type_id = t.id /*博客类型id=类型id*/
            </if>
            <if test="typeId != null">
                and b.type_id = #{typeId} /*根据博客类型查询*/
            </if>
            <if test="recommend != null">
                and b.recommend = #{recommend} /*根据博客推荐查询*/
            </if>
            <if test="title != null">
                and b.title like #{pattern} /*根据博客title模糊查询*/
            </if>
        </where>
    </select>

    <update id="updateBlog" parameterType="Blog">
        update t_blog
        set published       = #{published},
            flag            = #{flag},
            title           = #{title},
            content         = #{content},
            type_id         = #{typeId},
            tag_ids         = #{tagIds},
            first_picture   = #{firstPicture},
            description     = #{description},
            recommend       = #{recommend},
            share_statement = #{shareStatement},
            appreciation    = #{appreciation},
            commentabled    = #{commentabled},
            update_time     = #{updateTime}
        where id = #{id};
    </update>

    <!--useGeneratedKeys="true"；使用自增主键获取主键值策略
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
    -->
    <insert id="saveBlog" parameterType="Blog" useGeneratedKeys="true" keyProperty="id">
        insert into t_blog (title, content, first_picture, flag,
                            views, appreciation, share_statement, commentabled, published,
                            recommend, create_time, update_time, type_id, tag_ids, user_id, description)
        values (#{title}, #{content}, #{firstPicture}, #{flag}, #{views}, #{appreciation},
                #{shareStatement}, #{commentabled}, #{published}, #{recommend}, #{createTime},
                #{updateTime}, #{typeId}, #{tagIds}, #{userId}, #{description});
    </insert>

    <insert id="saveBlogAndTag" parameterType="BlogAndTag">
        insert into t_blog_tags (tag_id, blog_id)
        values (#{tagId}, #{blogId});
    </insert>

    <delete id="deleteBlogAndTag" parameterType="BlogAndTag">
        delete
        from t_blog_tags
        where blog_id = #{blogId}
    </delete>

    <select id="findGroupYear" resultType="String">
        select DATE_FORMAT(b.update_time, '%Y')
        from t_blog b
        order by b.update_time desc
    </select>

    <select id="findByYear" resultMap="blog">
        select b.title, b.update_time, b.id, b.flag
        from t_blog b
        where DATE_FORMAT(b.update_time, "%Y") = #{year}
    </select>


</mapper>